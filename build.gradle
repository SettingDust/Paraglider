import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'maven-publish'
    id "java-library"
    id "idea"
    alias libs.plugins.quilt.loom
    alias libs.plugins.kotlin.jvm
    alias libs.plugins.kotlin.kapt
}

archivesBaseName = project.archives_base_name
version = "${project.version}+${libs.versions.minecraft.get()}"
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven { url = 'https://ladysnake.jfrog.io/artifactory/mods' }

    maven { url 'https://maven.wispforest.io' }

    maven { url 'https://jitpack.io' }
    mavenCentral()
}

loom {
    accessWidenerPath = file("src/main/resources/${project.archives_base_name}.accesswidener")
//    splitEnvironmentSourceSets()
    mods {
        paraglider {
            sourceSet sourceSets.main
        }
    }
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
    minecraft libs.minecraft
    mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }

    modImplementation libs.quilt.loader

    // QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
    // Quilted Fabric API will automatically pull in the correct QSL version.
    modImplementation libs.quilted.fabric.api
    modImplementation libs.quilt.kotlin.libraries
    // modImplementation libs.bundles.quilted.fabric.api // If you wish to use Fabric API's deprecated modules, you can replace the above line with this one

    modImplementation libs.owo
    kapt libs.owo
    include libs.owo.sentinel

    // Adds a dependency on the base cardinal components module (required by every other module)
    // Replace modImplementation with modApi if you expose components in your own API
    modImplementation libs.cardinal.components.base
    // Adds a dependency on a specific module
    modImplementation libs.cardinal.components.entity
    modImplementation libs.cardinal.components.world

    include libs.mixin.extras
    implementation libs.mixin.extras
    annotationProcessor libs.mixin.extras
}

processResources {
    inputs.property 'version', version

    filesMatching('quilt.mod.json') {
        expand "version": version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release.set(17)
}

java {
    // Still required by IDEs such as Eclipse and Visual Studio Code
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    // If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
    // Uncomment this line to generate them.
    // withJavadocJar()
}

tasks.withType(KotlinCompile.class).configureEach {
    kotlinOptions {
        jvmTarget = 17
    }
}

jar {
    filesMatching('LICENSE') {
        rename '^(LICENSE.*?)(\\..*)?$', "\$1_${archivesBaseName}\$2"
    }
}

wrapper {
    gradleVersion = '7.6'
    distributionType = Wrapper.DistributionType.ALL
}

// Configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
